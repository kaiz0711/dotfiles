--# selene: allow(unused_variable)
---@diagnostic disable: unused-local

-- string (default: "tcqj", Vi default: "vt")
-- 			local to buffer
-- 	This is a sequence of letters which describes how automatic
-- 	formatting is to be done.  See |fo-table|.  When the 'paste' option is
-- 	on, no formatting is done (like 'formatoptions' is empty).  Commas can
-- 	be inserted for readability.
-- 	To avoid problems with flags that are added in the future, use the
-- 	"+=" and "-=" feature of ":set" |add-option-flags|.
vim.bo.formatoptions = "tcqj"
-- string (default: "^\s*\d\+[\]:.)}\t ]\s*")
-- 			local to buffer
-- 	A pattern that is used to recognize a list header.  This is used for
-- 	the "n" flag in 'formatoptions'.
-- 	The pattern must match exactly the text that will be the indent for
-- 	the line below it.  You can use |/\ze| to mark the end of the match
-- 	while still checking more characters.  There must be a character
-- 	following the pattern, when it matches the whole line it is handled
-- 	like there is no match.
-- 	The default recognizes a number, followed by an optional punctuation
-- 	character and white space.
vim.bo.formatlistpat = "^\\s*\\d\\+[\\]:.)}\\t ]\\s*"
-- string (default "")
-- 			global or local to buffer |global-local|
-- 	The name of an external program that will be used to format the lines
-- 	selected with the |gq| operator.  The program must take the input on
-- 	stdin and produce the output on stdout.  The Unix program "fmt" is
-- 	such a program.
-- 	If the 'formatexpr' option is not empty it will be used instead.
-- 	Otherwise, if 'formatprg' option is an empty string, the internal
-- 	format function will be used |C-indenting|.
-- 	Environment variables are expanded |:set_env|.  See |option-backslash|
-- 	about including spaces and backslashes.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.formatprg = ""
-- boolean	(default off)
-- 			local to buffer
-- 	Lisp mode: When <Enter> is typed in insert mode set the indent for
-- 	the next line to Lisp standards (well, sort of).  Also happens with
-- 	"cc" or "S".  'autoindent' must also be on for this to work.  The 'p'
-- 	flag in 'cpoptions' changes the method of indenting: Vi compatible or
-- 	better.  Also see 'lispwords'.
-- 	The '-' character is included in keyword characters.  Redefines the
-- 	"=" operator to use this same indentation algorithm rather than
-- 	calling an external program if 'equalprg' is empty.
-- 	This option is not used when 'paste' is set.
vim.bo.lisp = "false"
-- string	(default is very long)
-- 			global or local to buffer |global-local|
-- 	Comma separated list of words that influence the Lisp indenting.
-- 	|'lisp'|
vim.bo.lispwords = "defun,define,defmacro,set!,lambda,if,case,let,flet,let*,letrec,do,do*,define-syntax,let-syntax,letrec-syntax,destructuring-bind,defpackage,defparameter,defstruct,deftype,defvar,do-all-symbols,do-external-symbols,do-symbols,dolist,dotimes,ecase,etypecase,eval-when,labels,macrolet,multiple-value-bind,multiple-value-call,multiple-value-prog1,multiple-value-setq,prog1,progv,typecase,unless,unwind-protect,when,with-input-from-string,with-open-file,with-open-stream,with-output-to-string,with-package-iterator,define-condition,handler-bind,handler-case,restart-bind,restart-case,with-simple-restart,store-value,use-value,muffle-warning,abort,continue,with-slots,with-slots*,with-accessors,with-accessors*,defclass,defmethod,print-unreadable-object"
-- string	(default on Unix: ".,/usr/include,,"
-- 				   other systems: ".,,")
-- 			global or local to buffer |global-local|
-- 	This is a list of directories which will be searched when using the
-- 	|gf|, [f, ]f, ^Wf, |:find|, |:sfind|, |:tabfind| and other commands,
-- 	provided that the file being searched for has a relative path (not
-- 	starting with "/", "./" or "../").  The directories in the 'path'
-- 	option may be relative or absolute.
-- 	- Use commas to separate directory names: >
-- 		:set path=.,/usr/local/include,/usr/include
-- <	- Spaces can also be used to separate directory names (for backwards
-- 	  compatibility with version 3.0).  To have a space in a directory
-- 	  name, precede it with an extra backslash, and escape the space: >
-- 		:set path=.,/dir/with\\\ space
-- <	- To include a comma in a directory name precede it with an extra
-- 	  backslash: >
-- 		:set path=.,/dir/with\\,comma
-- <	- To search relative to the directory of the current file, use: >
-- 		:set path=.
-- <	- To search in the current directory use an empty string between two
-- 	  commas: >
-- 		:set path=,,
-- <	- A directory name may end in a ':' or '/'.
-- 	- Environment variables are expanded |:set_env|.
-- 	- When using |netrw.vim| URLs can be used.  For example, adding
-- 	  "http://www.vim.org" will make ":find index.html" work.
-- 	- Search upwards and downwards in a directory tree using "*", "**" and
-- 	  ";".  See |file-searching| for info and syntax.
-- 	- Careful with '\' characters, type two to get one in the option: >
-- 		:set path=.,c:\\include
-- <	  Or just use '/' instead: >
-- 		:set path=.,c:/include
-- <	Don't forget "." or files won't even be found in the same directory as
-- 	the file!
-- 	The maximum length is limited.  How much depends on the system, mostly
-- 	it is something like 256 or 1024 characters.
-- 	You can check if all the include files are found, using the value of
-- 	'path', see |:checkpath|.
-- 	The use of |:set+=| and |:set-=| is preferred when adding or removing
-- 	directories from the list.  This avoids problems when a future version
-- 	uses another default.  To remove the current directory use: >
-- 		:set path-=
-- <	To add the current directory use: >
-- 		:set path+=
-- <	To use an environment variable, you probably need to replace the
-- 	separator.  Here is an example to append $INCL, in which directory
-- 	names are separated with a semi-colon: >
-- 		:let &path = &path . "," . substitute($INCL, ';', ',', 'g')
-- <	Replace the ';' with a ':' or whatever separator is used.  Note that
-- 	this doesn't work when $INCL contains a comma or white space.
vim.bo.path = ".,/usr/include,,"
-- number	(default 0)
-- 			local to buffer
-- 	Maximum width of text that is being inserted.  A longer line will be
-- 	broken after white space to get this width.  A zero value disables
-- 	this.
-- 	'textwidth' is set to 0 when the 'paste' option is set and restored
-- 	when 'paste' is reset.
-- 	When 'textwidth' is zero, 'wrapmargin' may be used.  See also
-- 	'formatoptions' and |ins-textwidth|.
-- 	When 'formatexpr' is set it will be used to break the line.
vim.bo.textwidth = "0"
-- string	(default "grep -n ",
-- 				 Unix: "grep -n $* /dev/null")
-- 			global or local to buffer |global-local|
-- 	Program to use for the |:grep| command.  This option may contain '%'
-- 	and '#' characters, which are expanded like when used in a command-
-- 	line.  The placeholder "$*" is allowed to specify where the arguments
-- 	will be included.  Environment variables are expanded |:set_env|.  See
-- 	|option-backslash| about including spaces and backslashes.
-- 	When your "grep" accepts the "-H" argument, use this to make ":grep"
-- 	also work well with a single file: >
-- 		:set grepprg=grep\ -nH
-- <	Special value: When 'grepprg' is set to "internal" the |:grep| command
-- 	works like |:vimgrep|, |:lgrep| like |:lvimgrep|, |:grepadd| like
-- 	|:vimgrepadd| and |:lgrepadd| like |:lvimgrepadd|.
-- 	See also the section |:make_makeprg|, since most of the comments there
-- 	apply equally to 'grepprg'.
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.grepprg = "grep -n $* /dev/null"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	List of file names, separated by commas, that are used to lookup words
-- 	for thesaurus completion commands |i_CTRL-X_CTRL-T|.
vim.bo.thesaurus = ""
-- boolean	(default off)
-- 			local to buffer
-- 	In Insert mode: Use the appropriate number of spaces to insert a
-- 	<Tab>.  Spaces are used in indents with the '>' and '<' commands and
-- 	when 'autoindent' is on.  To insert a real tab when 'expandtab' is
-- 	on, use CTRL-V<Tab>.  See also |:retab| and |ins-expandtab|.
-- 	This option is reset when the 'paste' option is set and restored when
-- 	the 'paste' option is reset.
vim.bo.expandtab = "false"
-- string	(default
-- 				"s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-")
-- 			local to buffer
-- 	A comma separated list of strings that can start a comment line.  See
-- 	|format-comments|.  See |option-backslash| about using backslashes to
-- 	insert a space.
vim.bo.comments = "s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-"
-- string	(default: ".,w,b,u,t")
-- 			local to buffer
-- 	This option specifies how keyword completion |ins-completion| works
-- 	when CTRL-P or CTRL-N are used.  It is also used for whole-line
-- 	completion |i_CTRL-X_CTRL-L|.  It indicates the type of completion
-- 	and the places to scan.  It is a comma separated list of flags:
-- 	.	scan the current buffer ('wrapscan' is ignored)
-- 	w	scan buffers from other windows
-- 	b	scan other loaded buffers that are in the buffer list
-- 	u	scan the unloaded buffers that are in the buffer list
-- 	U	scan the buffers that are not in the buffer list
-- 	k	scan the files given with the 'dictionary' option
-- 	kspell  use the currently active spell checking |spell|
-- 	k{dict}	scan the file {dict}.  Several "k" flags can be given,
-- 		patterns are valid too.  For example: >
-- 			:set cpt=k/usr/dict/*,k~/spanish
-- <	s	scan the files given with the 'thesaurus' option
-- 	s{tsr}	scan the file {tsr}.  Several "s" flags can be given, patterns
-- 		are valid too.
-- 	i	scan current and included files
-- 	d	scan current and included files for defined name or macro
-- 		|i_CTRL-X_CTRL-D|
-- 	]	tag completion
-- 	t	same as "]"
vim.bo.complete = ".,w,b,u,t"
-- boolean	(default off)
-- 			local to buffer
-- 	When changing the indent of the current line, preserve as much of the
-- 	indent structure as possible.  Normally the indent is replaced by a
-- 	series of tabs followed by spaces as required (unless |'expandtab'| is
-- 	enabled, in which case only spaces are used).  Enabling this option
-- 	means the indent will preserve as many existing characters as possible
-- 	for indenting, and only add additional tabs or spaces as required.
-- 	'expandtab' does not apply to the preserved white space, a Tab remains
-- 	a Tab.
-- 	NOTE: When using ">>" multiple times the resulting indent is a mix of
-- 	tabs and spaces.  You might not like this.
-- 	Also see 'copyindent'.
-- 	Use |:retab| to clean up white space.
vim.bo.preserveindent = "false"
-- string	(default "")
-- 			global or local to buffer |global-local|
-- 	Encoding used for reading the output of external commands.  When empty,
-- 	encoding is not converted.
-- 	This is used for `:make`, `:lmake`, `:grep`, `:lgrep`, `:grepadd`,
-- 	`:lgrepadd`, `:cfile`, `:cgetfile`, `:caddfile`, `:lfile`, `:lgetfile`,
-- 	and `:laddfile`.
vim.bo.makeencoding = ""
vim.bo.spelloptions = ""
-- string	(default "make")
-- 			global or local to buffer |global-local|
-- 	Program to use for the ":make" command.  See |:make_makeprg|.
-- 	This option may contain '%' and '#' characters (see  |:_%| and |:_#|),
-- 	which are expanded to the current and alternate file name.  Use |::S|
-- 	to escape file names in case they contain special characters.
-- 	Environment variables are expanded |:set_env|.  See |option-backslash|
-- 	about including spaces and backslashes.
-- 	Note that a '|' must be escaped twice: once for ":set" and once for
-- 	the interpretation of a command.  When you use a filter called
-- 	"myfilter" do it like this: >
-- 	    :set makeprg=gmake\ \\\|\ myfilter
-- <	The placeholder "$*" can be given (even multiple times) to specify
-- 	where the arguments will be included, for example: >
-- 	    :set makeprg=latex\ \\\\nonstopmode\ \\\\input\\{$*}
-- <	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.makeprg = "make"
-- string	(default empty)
-- 			local to buffer
-- 	When this option is set, the syntax with this name is loaded, unless
-- 	syntax highlighting has been switched off with ":syntax off".
-- 	Otherwise this option does not always reflect the current syntax (the
-- 	b:current_syntax variable does).
-- 	This option is most useful in a modeline, for a file which syntax is
-- 	not automatically recognized.  Example, in an IDL file:
-- 		/* vim: set syntax=idl : */ ~
-- 	When a dot appears in the value then this separates two filetype
-- 	names.  Example:
-- 		/* vim: set syntax=c.doxygen : */ ~
-- 	This will use the "c" syntax first, then the "doxygen" syntax.
-- 	Note that the second one must be prepared to be loaded as an addition,
-- 	otherwise it will be skipped.  More than one dot may appear.
-- 	To switch off syntax highlighting for the current file, use: >
-- 		:set syntax=OFF
-- <	To switch syntax highlighting on according to the current value of the
-- 	'filetype' option: >
-- 		:set syntax=ON
-- <	What actually happens when setting the 'syntax' option is that the
-- 	Syntax autocommand event is triggered with the value as argument.
-- 	This option is not copied to another buffer, independent of the 's' or
-- 	'S' flag in 'cpoptions'.
-- 	Only normal file name characters can be used, "/\*?[|<>" are illegal.
vim.bo.syntax = ""
-- string	(default: empty)
-- 			local to buffer
-- 	This option specifies a function to be used to perform tag searches.
-- 	The function gets the tag pattern and should return a List of matching
-- 	tags.  See |tag-function| for an explanation of how to write the
-- 	function and an example.
vim.bo.tagfunc = ""
-- string	(default "(:),{:},[:]")
-- 			local to buffer
-- 	Characters that form pairs.  The |%| command jumps from one to the
-- 	other.
-- 	Only character pairs are allowed that are different, thus you cannot
-- 	jump between two double quotes.
-- 	The characters must be separated by a colon.
-- 	The pairs must be separated by a comma.  Example for including '<' and
-- 	'>' (HTML): >
-- 		:set mps+=<:>
vim.bo.matchpairs = "(:),{:},[:]"
-- string	(default "followic")
-- 			global or local to buffer |global-local|
-- 	This option specifies how case is handled when searching the tags
-- 	file:
-- 	   followic	Follow the 'ignorecase' option
-- 	   followscs    Follow the 'smartcase' and 'ignorecase' options
-- 	   ignore	Ignore case
-- 	   match	Match case
-- 	   smart	Ignore case unless an upper case letter is used
vim.bo.tagcase = "followic"
-- string	(default: empty)
-- 			local to buffer
-- 	This option specifies a function to be used for Insert mode omni
-- 	completion with CTRL-X CTRL-O. |i_CTRL-X_CTRL-O|
-- 	See |complete-functions| for an explanation of how the function is
-- 	invoked and what it should return.
-- 	This option is usually set by a filetype plugin:
-- 	|:filetype-plugin-on|
-- 	This option cannot be set from a |modeline| or in the |sandbox|, for
-- 	security reasons.
vim.bo.omnifunc = ""
-- number	(default 0)
-- 			local to buffer
-- 	Number of characters from the right window border where wrapping
-- 	starts.  When typing text beyond this limit, an <EOL> will be inserted
-- 	and inserting continues on the next line.
-- 	Options that add a margin, such as 'number' and 'foldcolumn', cause
-- 	the text width to be further reduced.  This is Vi compatible.
-- 	When 'textwidth' is non-zero, this option is not used.
-- 	See also 'formatoptions' and |ins-textwidth|.
vim.bo.wrapmargin = "0"
-- string	(default "bin,hex")
-- 			local to buffer
-- 	This defines what bases Vim will consider for numbers when using the
-- 	CTRL-A and CTRL-X commands for adding to and subtracting from a number
-- 	respectively; see |CTRL-A| for more info on these commands.
-- 	alpha	If included, single alphabetical characters will be
-- 		incremented or decremented.  This is useful for a list with a
-- 		letter index a), b), etc.		*octal-nrformats*
-- 	octal	If included, numbers that start with a zero will be considered
-- 		to be octal.  Example: Using CTRL-A on "007" results in "010".
-- 	hex	If included, numbers starting with "0x" or "0X" will be
-- 		considered to be hexadecimal.  Example: Using CTRL-X on
-- 		"0x100" results in "0x0ff".
-- 	bin	If included, numbers starting with "0b" or "0B" will be
-- 		considered to be binary.  Example: Using CTRL-X on
-- 		"0b1000" subtracts one, resulting in "0b0111".
-- 	Numbers which simply begin with a digit in the range 1-9 are always
-- 	considered decimal.  This also happens for numbers that are not
-- 	recognized as octal or hex.
vim.bo.nrformats = "bin,hex"
-- number (default 0)
-- 			local to buffer
-- 	Specifies whether :lmap or an Input Method (IM) is to be used in
-- 	Insert mode.  Valid values:
-- 		0	:lmap is off and IM is off
-- 		1	:lmap is ON and IM is off
-- 		2	:lmap is off and IM is ON
-- 	To always reset the option to zero when leaving Insert mode with <Esc>
-- 	this can be used: >
-- 		:inoremap <ESC> <ESC>:set iminsert=0<CR>
-- <	This makes :lmap and IM turn off automatically when leaving Insert
-- 	mode.
-- 	Note that this option changes when using CTRL-^ in Insert mode
-- 	|i_CTRL-^|.
-- 	The value is set to 1 when setting 'keymap' to a valid keymap name.
-- 	It is also used for the argument of commands like "r" and "f".
vim.bo.iminsert = "0"
-- boolean	(default on)
-- 			local to buffer
-- 	When writing a file and this option is on, <EOL> at the end of file
-- 	will be restored if missing. Turn this option off if you want to
-- 	preserve the situation from the original file.
-- 	When the 'binary' option is set the value of this option doesn't
-- 	matter.
-- 	See the 'endofline' option.
vim.bo.fixendofline = "true"
-- string	(default "^\s*#\s*define")
-- 			global or local to buffer |global-local|
-- 	Pattern to be used to find a macro definition.  It is a search
-- 	pattern, just like for the "/" command.  This option is used for the
-- 	commands like "[i" and "[d" |include-search|.  The 'isident' option is
-- 	used to recognize the defined name after the match:
-- 		{match with 'define'}{non-ID chars}{defined name}{non-ID char}
-- 	See |option-backslash| about inserting backslashes to include a space
-- 	or backslash.
-- 	The default value is for C programs.  For C++ this value would be
-- 	useful, to include const type declarations: >
-- 		^\(#\s*define\|[a-z]*\s*const\s*[a-z]*\)
-- <	You can also use "\ze" just before the name and continue the pattern
-- 	to check what is following.  E.g. for Javascript, if a function is
-- 	defined with "func_name = function(args)": >
-- 		^\s*\ze\i\+\s*=\s*function(
-- <	If the function is defined with "func_name : function() {...": >
-- 	        ^\s*\ze\i\+\s*[:]\s*(*function\s*(
-- <	When using the ":set" command, you need to double the backslashes!
-- 	To avoid that use `:let` with a single quote string: >
-- 		let &l:define = '^\s*\ze\k\+\s*=\s*function('
-- <
vim.bo.define = "^\\s*#\\s*define"
-- string	(default "/*%s*/")
-- 			local to buffer
-- 	A template for a comment.  The "%s" in the value is replaced with the
-- 	comment text.  Currently only used to add markers for folding, see
-- 	|fold-marker|.
vim.bo.commentstring = "/*%s*/"
-- boolean	(default on)
-- 			global or local to buffer |global-local|
-- 	When a file has been detected to have been changed outside of Vim and
-- 	it has not been changed inside of Vim, automatically read it again.
-- 	When the file has been deleted this is not done, so you have the text
-- 	from before it was deleted.  When it appears again then it is read.
-- 	|timestamp|
-- 	If this option has a local value, use this command to switch back to
-- 	using the global value: >
-- 		:set autoread<
-- <
-- 				 *'autowrite'* *'aw'* *'noautowrite'* *'noaw'*
vim.bo.autoread = "true"
-- boolean	(default off)
-- 			local to buffer
-- 	When on, Vim automatically saves undo history to an undo file when
-- 	writing a buffer to a file, and restores undo history from the same
-- 	file on buffer read.
-- 	The directory where the undo file is stored is specified by 'undodir'.
-- 	For more information about this feature see |undo-persistence|.
-- 	The undo file is not read when 'undoreload' causes the buffer from
-- 	before a reload to be saved for undo.
-- 	When 'undofile' is turned off the undo file is NOT deleted.
vim.bo.undofile = "false"
-- number	(default 8)
-- 			local to buffer
-- 	Number of spaces to use for each step of (auto)indent.  Used for
-- 	|'cindent'|, |>>|, |<<|, etc.
-- 	When zero the 'ts' value will be used.  Use the |shiftwidth()|
-- 	function to get the effective shiftwidth value.
vim.bo.shiftwidth = "8"
-- number	(default 1000)
-- 			global or local to buffer |global-local|
-- 	Maximum number of changes that can be undone.  Since undo information
-- 	is kept in memory, higher numbers will cause more memory to be used
-- 	(nevertheless, a single change can use an unlimited amount of memory).
-- 	Set to 0 for Vi compatibility: One level of undo and "u" undoes
-- 	itself: >
-- 		set ul=0
-- <	But you can also get Vi compatibility by including the 'u' flag in
-- 	'cpoptions', and still be able to use CTRL-R to repeat undo.
-- 	Also see |undo-two-ways|.
-- 	Set to -1 for no undo at all.  You might want to do this only for the
-- 	current buffer: >
-- 		setlocal ul=-1
-- <	This helps when you run out of memory for a single change.
vim.bo.undolevels = "1000"
